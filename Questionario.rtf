{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1046{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang22 vitor akio tamura\par
\par
1- Acompanhar o seu desenvolvimento a desde a comunica\'e7\'e3o, planjamento, modelagem, constru\'e7\'e3o e implanta\'e7\'e3o.\par
2- Os Processos Prescritivos recebem essa denomina\'e7\'e3o porque, assim como uma receita m\'e9dica, ir\'e3o \ldblquote prescrever\rdblquote  algo a ser realizado, no caso, a\'e7\'f5es de engenharia de software, produtos de trabalho e mecanismos que garantam a qualidade e controle de modifica\'e7\'f5es em cada projeto necess\'e1rias para o desenvolvimento de um sistema desoftware.\par
3- O motivador para o surgimento da Engenharia de Software foi o caos. Como, a partir da d\'e9cada de 60, o hardware deixou de representar um problema com o advento dos microprocessadores e o software tornou-se o foco dos pesquisadores, as organiza\'e7\'f5es come\'e7aram a desenvolver grandes sistemas. Logo, osdesenvolvedores se depararam com o problema da falta de metodologia: as equipes de trabalho n\'e3o tinham um modelo de como desenvolver; n\'e3o havia documenta\'e7\'e3o adequada do que estava sendo executado e a manuten\'e7\'e3o do sistema tornava-se demasiadamente complicada. Al\'e9m disso, os custos eram altos e a qualidade do software produzido deixava a desejar e nem sempre agradava o cliente.\par
4- Podemos fazer analogias da Engenharia de Software com o que ocorre em outras \'e1reas, tais como a Engenharia Civil. Por exemplo, para se construir uma casinha de cachorro, n\'e3o \'e9 necess\'e1rio elaborar um projeto de engenharia civil, com plantas baixa, hidr\'e1ulica eel\'e9trica, ou mesmo c\'e1lculos estruturais. Um bom pedreiro \'e9 capaz de resolver o problema a contento. Talvez n\'e3o seja dada a melhor solu\'e7\'e3o, mas o produto resultante pode atender aos requisitos pr\'e9-estabelecidos. Essa abordagem, contudo, n\'e3o \'e9 vi\'e1vel para a constru\'e7\'e3o de um edif\'edcio. Nesse caso, \'e9 necess\'e1rio realizar um estudo aprofundado, incluindo an\'e1lises de solo, c\'e1lculos estruturais etc.,seguido de um planejamento da execu\'e7\'e3o da obra e desenvolvimento de modelos (maquetes e plantas de diversas naturezas), at\'e9 a realiza\'e7\'e3o da obra, que deve ocorrer por etapas, tais como funda\'e7\'e3o, alvenaria, acabamento etc. Ao longo da realiza\'e7\'e3o do trabalho, deve-se realizar um acompanhamento para verificar prazos, custos e a qualidade do que se est\'e1 construindo.\par
5- A raz\'e3o de existir. Um sistema de software existe por um motivo: agregar valor para seus usu\'e1rios. Todas as decis\'f5es devem ser tomadas com esse princ\'edpio em mente. Antes de especificar um requisito de um sistema, antes de indicar alguma parte da funcionalidade de um sistema, antes de determinar as plataformas de hardware ou os processos de desenvolvimento, pergunte a si mesmo: \ldblquote Isso realmente agrega valor real ao sistema?\rdblquote . Se a resposta for \ldblquote n\'e3o\rdblquote , n\'e3o o fa\'e7a. Todos os demais princ\'edpios se apoiam nesse primeiro.\par
N\'e3o complique! O projeto de software n\'e3o \'e9 um processo casual. Existem muitos fatores a considerar em qualquer trabalho de projeto. Todo projeto deve ser o mais simples poss\'edvel, mas n\'e3o simplista. Esse princ\'edpio contribui para um sistema mais f\'e1cil de compreender e manter. Isso n\'e3o significa que caracter\'edsticas, at\'e9 mesmo as internas, devem ser descartadas em nome da simplicidade. De fato, os projetos mais elegantes normalmente s\'e3o os mais simples. Simples tamb\'e9m n\'e3o significa \ldblquote gambiarra\rdblquote . \par
Mantenha a vis\'e3o. Uma vis\'e3o clara \'e9 essencial para o sucesso. Sem ela, um projeto se torna amb\'edguo. Sem uma integridade conceitual, corre-se o risco de transformar o projeto em uma colcha de retalhos de projetos incompat\'edveis, unidos por parafusos inadequados\'85 Comprometer a vis\'e3o arquitetural de um sistema de software debilita e at\'e9 poder\'e1 destruir sistemas bem projetados. Ter um arquiteto respons\'e1vel e capaz de manter a vis\'e3o clara e de refor\'e7ar a adequa\'e7\'e3o ajuda a assegurar o \'eaxito de um projeto\par
O que um produz outros consomem. Raramente um sistema de software de qualidade industrial \'e9 constru\'eddo e utilizado de forma isolada. De uma maneira ou de outra, algu\'e9m mais vai usar, manter documentar ou, de alguma forma, depender da capacidade de entender seu sistema. Portanto, sempre especifique, projete e implemente ciente de que mais algu\'e9m ter\'e1 de entender o que voc\'ea est\'e1 fazendo. O p\'fablico para qualquer produto de desenvolvimento de software \'e9 potencialmente grande. Especifique tendo como objeto os usu\'e1rios. \par
Esteja aberto para o futuro. Um sistema com tempo de vida mais longo tem mais valor. Nos ambientes computacionais de hoje, em que as especifica\'e7\'f5es mudam de um instante para outro, e as plataformas de hardware se tornam rapidamente obsoletas, a vida de um software, em geral, \'e9 medida em meses. Contudo, os verdadeiros sistemas de software com qualidade industrial devem durar muito mais.\par
Planeje com anteced\'eancia, visando a reutiliza\'e7\'e3o. A reutiliza\'e7\'e3o economiza tempo e esfor\'e7o. Alcan\'e7ar um alto grau de reutiliza\'e7\'e3o \'e9 indiscutivelmente a meta mais dif\'edcil de ser atingida ao se desenvolver um sistema de software. A reutiliza\'e7\'e3o de c\'f3digo e projetos tem sido proclamada como uma grande vantagem do uso de tecnologias orientadas a objetos. Contudo, o retorno desse investimento n\'e3o \'e9 autom\'e1tico. Planejar com anteced\'eancia para a reutiliza\'e7\'e3o reduz o custo e aumento o valor tanto dos componentes reutiliz\'e1veis quanto dos sistemas aos quais eles ser\'e3o incorporados.\par
Pense! Este \'faltimo princ\'edpio \'e9, provavelmente, o mais menosprezado. Pensar bem e de forma clara antes de agir quase sempre produz melhores resultados. Quando se analisa alguma coisa, provavelmente ela sair\'e1 correta. Ganha-se tamb\'e9m conhecimento de como fazer correto novamente. Se voc\'ea realmente analisar algo e mesmo assim o fizer da forma errada, isso se tornar\'e1 uma valiosa experi\'eancia.\par
\par
6- Reescreve-la de forma que fiquei mais simples o entendimento e tamb\'e9m para facilitar poss\'edveis mudan\'e7as ap\'f3s o t\'e9rmino do projeto, ou seja, otimizar o c\'f3digo para evitar processos desnecess\'e1rios e otimizar o desempenho do programa\par
7- De validar se est\'e1 de acordo com o escopo do projeto, sua qualidade, consist\'eancia durante sua execu\'e7\'e3o al\'e9m de procurar falhas e qualquer outro tipo de mal funcionamento.\par
8- Modelo cascata quando diferentes partes do sofware s\'e3o desenvolvidas separadamente  tendo em vista a constante fluidez durante o seu desenvolvimento e depois implementadas de acordo com o planejado evitando implementa\'e7\'f5es de \'faltima hora no produto final. Modelo Incremental se da pela aplica\'e7\'e3o de incrementos durante o desenvolvimento do software parecido com os processos vistos no Modelo Cascata.\par
9- Modelos evolucion\'e1rios s\'e3o caracterizados por serem iterativos e apresentarem caracter\'edsticas que possibilitem desenvolvermos vers\'f5es cada vez mais completas do software. Os processos evolucion\'e1rios se caracterizam por dois modelos comuns: Prototipa\'e7\'e3o e Espiral.\par
10- Na prototipagem se tem uma vis\'e3o de como ficar\'e1 o produto final tendo assim um "molde" para realizar poss\'edveis futuras implementa\'e7\'f5es, por\'e9m pode estar sujeita a constantes mudan\'e7as de acordo com os interesses do cliente podendo alterar bruscamente o do produto final.\par
11- Quando se tem um projeto j\'e1 definido a partir da fase de planejamento e escopo.\par
12- Prot\'f3tipo evolutivo quando o software \'e9 desenvolvido em partes graduativas at\'e9 a finaliza\'e7\'e3o do sistema. Prot\'f3tipo descart\'e1vel \'e9 desenvolvido para encontrar falhas e depois cancelado.\par
}
 